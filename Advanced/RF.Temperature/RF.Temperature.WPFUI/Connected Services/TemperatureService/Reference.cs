//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace RF.Temperature.WPFUI.TemperatureService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="TemperatureService.ITempService")]
    public interface ITempService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITempService/DoWork", ReplyAction="http://tempuri.org/ITempService/DoWorkResponse")]
        void DoWork();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITempService/DoWork", ReplyAction="http://tempuri.org/ITempService/DoWorkResponse")]
        System.Threading.Tasks.Task DoWorkAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITempService/ConvertToFahrenheit", ReplyAction="http://tempuri.org/ITempService/ConvertToFahrenheitResponse")]
        double ConvertToFahrenheit(double celsius);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITempService/ConvertToFahrenheit", ReplyAction="http://tempuri.org/ITempService/ConvertToFahrenheitResponse")]
        System.Threading.Tasks.Task<double> ConvertToFahrenheitAsync(double celsius);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITempService/ConvertToCelsius", ReplyAction="http://tempuri.org/ITempService/ConvertToCelsiusResponse")]
        double ConvertToCelsius(double fahrenheit);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITempService/ConvertToCelsius", ReplyAction="http://tempuri.org/ITempService/ConvertToCelsiusResponse")]
        System.Threading.Tasks.Task<double> ConvertToCelsiusAsync(double fahrenheit);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ITempServiceChannel : RF.Temperature.WPFUI.TemperatureService.ITempService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TempServiceClient : System.ServiceModel.ClientBase<RF.Temperature.WPFUI.TemperatureService.ITempService>, RF.Temperature.WPFUI.TemperatureService.ITempService {
        
        public TempServiceClient() {
        }
        
        public TempServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public TempServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TempServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TempServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void DoWork() {
            base.Channel.DoWork();
        }
        
        public System.Threading.Tasks.Task DoWorkAsync() {
            return base.Channel.DoWorkAsync();
        }
        
        public double ConvertToFahrenheit(double celsius) {
            return base.Channel.ConvertToFahrenheit(celsius);
        }
        
        public System.Threading.Tasks.Task<double> ConvertToFahrenheitAsync(double celsius) {
            return base.Channel.ConvertToFahrenheitAsync(celsius);
        }
        
        public double ConvertToCelsius(double fahrenheit) {
            return base.Channel.ConvertToCelsius(fahrenheit);
        }
        
        public System.Threading.Tasks.Task<double> ConvertToCelsiusAsync(double fahrenheit) {
            return base.Channel.ConvertToCelsiusAsync(fahrenheit);
        }
    }
}
