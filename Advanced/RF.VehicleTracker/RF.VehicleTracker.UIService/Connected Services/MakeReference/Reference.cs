//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace RF.VehicleTracker.UIService.MakeReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CMake", Namespace="http://schemas.datacontract.org/2004/07/RF.VehicleTracker.BL")]
    [System.SerializableAttribute()]
    public partial class CMake : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid IdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="MakeReference.IMake")]
    public interface IMake {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMake/GetMakes", ReplyAction="http://tempuri.org/IMake/GetMakesResponse")]
        System.Collections.Generic.List<RF.VehicleTracker.UIService.MakeReference.CMake> GetMakes();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMake/GetMakes", ReplyAction="http://tempuri.org/IMake/GetMakesResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<RF.VehicleTracker.UIService.MakeReference.CMake>> GetMakesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMake/Insert", ReplyAction="http://tempuri.org/IMake/InsertResponse")]
        void Insert(string description);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMake/Insert", ReplyAction="http://tempuri.org/IMake/InsertResponse")]
        System.Threading.Tasks.Task InsertAsync(string description);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMake/Update", ReplyAction="http://tempuri.org/IMake/UpdateResponse")]
        void Update(System.Guid id, string description);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMake/Update", ReplyAction="http://tempuri.org/IMake/UpdateResponse")]
        System.Threading.Tasks.Task UpdateAsync(System.Guid id, string description);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMake/Delete", ReplyAction="http://tempuri.org/IMake/DeleteResponse")]
        void Delete(System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMake/Delete", ReplyAction="http://tempuri.org/IMake/DeleteResponse")]
        System.Threading.Tasks.Task DeleteAsync(System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMake/GetById", ReplyAction="http://tempuri.org/IMake/GetByIdResponse")]
        RF.VehicleTracker.UIService.MakeReference.CMake GetById(System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMake/GetById", ReplyAction="http://tempuri.org/IMake/GetByIdResponse")]
        System.Threading.Tasks.Task<RF.VehicleTracker.UIService.MakeReference.CMake> GetByIdAsync(System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMake/UpdateObj", ReplyAction="http://tempuri.org/IMake/UpdateObjResponse")]
        void UpdateObj(RF.VehicleTracker.UIService.MakeReference.CMake make);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMake/UpdateObj", ReplyAction="http://tempuri.org/IMake/UpdateObjResponse")]
        System.Threading.Tasks.Task UpdateObjAsync(RF.VehicleTracker.UIService.MakeReference.CMake make);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMake/DeleteObj", ReplyAction="http://tempuri.org/IMake/DeleteObjResponse")]
        void DeleteObj(RF.VehicleTracker.UIService.MakeReference.CMake make);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMake/DeleteObj", ReplyAction="http://tempuri.org/IMake/DeleteObjResponse")]
        System.Threading.Tasks.Task DeleteObjAsync(RF.VehicleTracker.UIService.MakeReference.CMake make);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IMakeChannel : RF.VehicleTracker.UIService.MakeReference.IMake, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class MakeClient : System.ServiceModel.ClientBase<RF.VehicleTracker.UIService.MakeReference.IMake>, RF.VehicleTracker.UIService.MakeReference.IMake {
        
        public MakeClient() {
        }
        
        public MakeClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public MakeClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MakeClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MakeClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Collections.Generic.List<RF.VehicleTracker.UIService.MakeReference.CMake> GetMakes() {
            return base.Channel.GetMakes();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<RF.VehicleTracker.UIService.MakeReference.CMake>> GetMakesAsync() {
            return base.Channel.GetMakesAsync();
        }
        
        public void Insert(string description) {
            base.Channel.Insert(description);
        }
        
        public System.Threading.Tasks.Task InsertAsync(string description) {
            return base.Channel.InsertAsync(description);
        }
        
        public void Update(System.Guid id, string description) {
            base.Channel.Update(id, description);
        }
        
        public System.Threading.Tasks.Task UpdateAsync(System.Guid id, string description) {
            return base.Channel.UpdateAsync(id, description);
        }
        
        public void Delete(System.Guid id) {
            base.Channel.Delete(id);
        }
        
        public System.Threading.Tasks.Task DeleteAsync(System.Guid id) {
            return base.Channel.DeleteAsync(id);
        }
        
        public RF.VehicleTracker.UIService.MakeReference.CMake GetById(System.Guid id) {
            return base.Channel.GetById(id);
        }
        
        public System.Threading.Tasks.Task<RF.VehicleTracker.UIService.MakeReference.CMake> GetByIdAsync(System.Guid id) {
            return base.Channel.GetByIdAsync(id);
        }
        
        public void UpdateObj(RF.VehicleTracker.UIService.MakeReference.CMake make) {
            base.Channel.UpdateObj(make);
        }
        
        public System.Threading.Tasks.Task UpdateObjAsync(RF.VehicleTracker.UIService.MakeReference.CMake make) {
            return base.Channel.UpdateObjAsync(make);
        }
        
        public void DeleteObj(RF.VehicleTracker.UIService.MakeReference.CMake make) {
            base.Channel.DeleteObj(make);
        }
        
        public System.Threading.Tasks.Task DeleteObjAsync(RF.VehicleTracker.UIService.MakeReference.CMake make) {
            return base.Channel.DeleteObjAsync(make);
        }
    }
}
