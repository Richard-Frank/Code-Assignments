//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace RF.VehicleTracker.UIService.VehicleReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CVehicle", Namespace="http://schemas.datacontract.org/2004/07/RF.VehicleTracker.BL")]
    [System.SerializableAttribute()]
    public partial class CVehicle : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid ColorIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid MakeIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid ModelIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string VINField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int YearField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid ColorId {
            get {
                return this.ColorIdField;
            }
            set {
                if ((this.ColorIdField.Equals(value) != true)) {
                    this.ColorIdField = value;
                    this.RaisePropertyChanged("ColorId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid MakeId {
            get {
                return this.MakeIdField;
            }
            set {
                if ((this.MakeIdField.Equals(value) != true)) {
                    this.MakeIdField = value;
                    this.RaisePropertyChanged("MakeId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid ModelId {
            get {
                return this.ModelIdField;
            }
            set {
                if ((this.ModelIdField.Equals(value) != true)) {
                    this.ModelIdField = value;
                    this.RaisePropertyChanged("ModelId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string VIN {
            get {
                return this.VINField;
            }
            set {
                if ((object.ReferenceEquals(this.VINField, value) != true)) {
                    this.VINField = value;
                    this.RaisePropertyChanged("VIN");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Year {
            get {
                return this.YearField;
            }
            set {
                if ((this.YearField.Equals(value) != true)) {
                    this.YearField = value;
                    this.RaisePropertyChanged("Year");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="VehicleReference.IVehicle")]
    public interface IVehicle {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IVehicle/GetVehicles", ReplyAction="http://tempuri.org/IVehicle/GetVehiclesResponse")]
        System.Collections.Generic.List<RF.VehicleTracker.UIService.VehicleReference.CVehicle> GetVehicles();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IVehicle/GetVehicles", ReplyAction="http://tempuri.org/IVehicle/GetVehiclesResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<RF.VehicleTracker.UIService.VehicleReference.CVehicle>> GetVehiclesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IVehicle/Insert", ReplyAction="http://tempuri.org/IVehicle/InsertResponse")]
        void Insert(System.Guid colorId, System.Guid makeId, System.Guid modelId, string vin, int year);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IVehicle/Insert", ReplyAction="http://tempuri.org/IVehicle/InsertResponse")]
        System.Threading.Tasks.Task InsertAsync(System.Guid colorId, System.Guid makeId, System.Guid modelId, string vin, int year);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IVehicle/Update", ReplyAction="http://tempuri.org/IVehicle/UpdateResponse")]
        void Update(System.Guid id, System.Guid colorId, System.Guid makeId, System.Guid modelId, string vin, int year);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IVehicle/Update", ReplyAction="http://tempuri.org/IVehicle/UpdateResponse")]
        System.Threading.Tasks.Task UpdateAsync(System.Guid id, System.Guid colorId, System.Guid makeId, System.Guid modelId, string vin, int year);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IVehicle/Delete", ReplyAction="http://tempuri.org/IVehicle/DeleteResponse")]
        void Delete(System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IVehicle/Delete", ReplyAction="http://tempuri.org/IVehicle/DeleteResponse")]
        System.Threading.Tasks.Task DeleteAsync(System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IVehicle/GetById", ReplyAction="http://tempuri.org/IVehicle/GetByIdResponse")]
        RF.VehicleTracker.UIService.VehicleReference.CVehicle GetById(System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IVehicle/GetById", ReplyAction="http://tempuri.org/IVehicle/GetByIdResponse")]
        System.Threading.Tasks.Task<RF.VehicleTracker.UIService.VehicleReference.CVehicle> GetByIdAsync(System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IVehicle/UpdateObj", ReplyAction="http://tempuri.org/IVehicle/UpdateObjResponse")]
        void UpdateObj(RF.VehicleTracker.UIService.VehicleReference.CVehicle vehicle);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IVehicle/UpdateObj", ReplyAction="http://tempuri.org/IVehicle/UpdateObjResponse")]
        System.Threading.Tasks.Task UpdateObjAsync(RF.VehicleTracker.UIService.VehicleReference.CVehicle vehicle);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IVehicle/DeleteObj", ReplyAction="http://tempuri.org/IVehicle/DeleteObjResponse")]
        void DeleteObj(RF.VehicleTracker.UIService.VehicleReference.CVehicle vehicle);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IVehicle/DeleteObj", ReplyAction="http://tempuri.org/IVehicle/DeleteObjResponse")]
        System.Threading.Tasks.Task DeleteObjAsync(RF.VehicleTracker.UIService.VehicleReference.CVehicle vehicle);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IVehicleChannel : RF.VehicleTracker.UIService.VehicleReference.IVehicle, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class VehicleClient : System.ServiceModel.ClientBase<RF.VehicleTracker.UIService.VehicleReference.IVehicle>, RF.VehicleTracker.UIService.VehicleReference.IVehicle {
        
        public VehicleClient() {
        }
        
        public VehicleClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public VehicleClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public VehicleClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public VehicleClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Collections.Generic.List<RF.VehicleTracker.UIService.VehicleReference.CVehicle> GetVehicles() {
            return base.Channel.GetVehicles();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<RF.VehicleTracker.UIService.VehicleReference.CVehicle>> GetVehiclesAsync() {
            return base.Channel.GetVehiclesAsync();
        }
        
        public void Insert(System.Guid colorId, System.Guid makeId, System.Guid modelId, string vin, int year) {
            base.Channel.Insert(colorId, makeId, modelId, vin, year);
        }
        
        public System.Threading.Tasks.Task InsertAsync(System.Guid colorId, System.Guid makeId, System.Guid modelId, string vin, int year) {
            return base.Channel.InsertAsync(colorId, makeId, modelId, vin, year);
        }
        
        public void Update(System.Guid id, System.Guid colorId, System.Guid makeId, System.Guid modelId, string vin, int year) {
            base.Channel.Update(id, colorId, makeId, modelId, vin, year);
        }
        
        public System.Threading.Tasks.Task UpdateAsync(System.Guid id, System.Guid colorId, System.Guid makeId, System.Guid modelId, string vin, int year) {
            return base.Channel.UpdateAsync(id, colorId, makeId, modelId, vin, year);
        }
        
        public void Delete(System.Guid id) {
            base.Channel.Delete(id);
        }
        
        public System.Threading.Tasks.Task DeleteAsync(System.Guid id) {
            return base.Channel.DeleteAsync(id);
        }
        
        public RF.VehicleTracker.UIService.VehicleReference.CVehicle GetById(System.Guid id) {
            return base.Channel.GetById(id);
        }
        
        public System.Threading.Tasks.Task<RF.VehicleTracker.UIService.VehicleReference.CVehicle> GetByIdAsync(System.Guid id) {
            return base.Channel.GetByIdAsync(id);
        }
        
        public void UpdateObj(RF.VehicleTracker.UIService.VehicleReference.CVehicle vehicle) {
            base.Channel.UpdateObj(vehicle);
        }
        
        public System.Threading.Tasks.Task UpdateObjAsync(RF.VehicleTracker.UIService.VehicleReference.CVehicle vehicle) {
            return base.Channel.UpdateObjAsync(vehicle);
        }
        
        public void DeleteObj(RF.VehicleTracker.UIService.VehicleReference.CVehicle vehicle) {
            base.Channel.DeleteObj(vehicle);
        }
        
        public System.Threading.Tasks.Task DeleteObjAsync(RF.VehicleTracker.UIService.VehicleReference.CVehicle vehicle) {
            return base.Channel.DeleteObjAsync(vehicle);
        }
    }
}
