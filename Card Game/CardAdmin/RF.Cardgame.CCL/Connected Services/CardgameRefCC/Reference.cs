//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace RF.Cardgame.CCL.CardgameRefCC {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CAdmin", Namespace="http://schemas.datacontract.org/2004/07/RF.Cardgame.BL")]
    [System.SerializableAttribute()]
    public partial class CAdmin : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PasswordField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Password {
            get {
                return this.PasswordField;
            }
            set {
                if ((object.ReferenceEquals(this.PasswordField, value) != true)) {
                    this.PasswordField = value;
                    this.RaisePropertyChanged("Password");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CPlayer", Namespace="http://schemas.datacontract.org/2004/07/RF.Cardgame.BL")]
    [System.SerializableAttribute()]
    public partial class CPlayer : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int LossesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PasswordField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int WinsField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Losses {
            get {
                return this.LossesField;
            }
            set {
                if ((this.LossesField.Equals(value) != true)) {
                    this.LossesField = value;
                    this.RaisePropertyChanged("Losses");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Password {
            get {
                return this.PasswordField;
            }
            set {
                if ((object.ReferenceEquals(this.PasswordField, value) != true)) {
                    this.PasswordField = value;
                    this.RaisePropertyChanged("Password");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Wins {
            get {
                return this.WinsField;
            }
            set {
                if ((this.WinsField.Equals(value) != true)) {
                    this.WinsField = value;
                    this.RaisePropertyChanged("Wins");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CCard", Namespace="http://schemas.datacontract.org/2004/07/RF.Cardgame.BL")]
    [System.SerializableAttribute()]
    public partial class CCard : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int AttackField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CostField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int HealthField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Attack {
            get {
                return this.AttackField;
            }
            set {
                if ((this.AttackField.Equals(value) != true)) {
                    this.AttackField = value;
                    this.RaisePropertyChanged("Attack");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Cost {
            get {
                return this.CostField;
            }
            set {
                if ((this.CostField.Equals(value) != true)) {
                    this.CostField = value;
                    this.RaisePropertyChanged("Cost");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Health {
            get {
                return this.HealthField;
            }
            set {
                if ((this.HealthField.Equals(value) != true)) {
                    this.HealthField = value;
                    this.RaisePropertyChanged("Health");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CDeck", Namespace="http://schemas.datacontract.org/2004/07/RF.Cardgame.BL")]
    [System.SerializableAttribute()]
    public partial class CDeck : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CGame", Namespace="http://schemas.datacontract.org/2004/07/RF.Cardgame.BL")]
    [System.SerializableAttribute()]
    public partial class CGame : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime MatchDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid OpponentIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid PlayerIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime MatchDate {
            get {
                return this.MatchDateField;
            }
            set {
                if ((this.MatchDateField.Equals(value) != true)) {
                    this.MatchDateField = value;
                    this.RaisePropertyChanged("MatchDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid OpponentId {
            get {
                return this.OpponentIdField;
            }
            set {
                if ((this.OpponentIdField.Equals(value) != true)) {
                    this.OpponentIdField = value;
                    this.RaisePropertyChanged("OpponentId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid PlayerId {
            get {
                return this.PlayerIdField;
            }
            set {
                if ((this.PlayerIdField.Equals(value) != true)) {
                    this.PlayerIdField = value;
                    this.RaisePropertyChanged("PlayerId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="CardgameRefCC.ICardgame")]
    public interface ICardgame {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICardgame/LoadAdmins", ReplyAction="http://tempuri.org/ICardgame/LoadAdminsResponse")]
        System.Collections.Generic.List<RF.Cardgame.CCL.CardgameRefCC.CAdmin> LoadAdmins();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICardgame/LoadAdmins", ReplyAction="http://tempuri.org/ICardgame/LoadAdminsResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<RF.Cardgame.CCL.CardgameRefCC.CAdmin>> LoadAdminsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICardgame/LoadAdminById", ReplyAction="http://tempuri.org/ICardgame/LoadAdminByIdResponse")]
        RF.Cardgame.CCL.CardgameRefCC.CAdmin LoadAdminById(System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICardgame/LoadAdminById", ReplyAction="http://tempuri.org/ICardgame/LoadAdminByIdResponse")]
        System.Threading.Tasks.Task<RF.Cardgame.CCL.CardgameRefCC.CAdmin> LoadAdminByIdAsync(System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICardgame/InsertAdmin", ReplyAction="http://tempuri.org/ICardgame/InsertAdminResponse")]
        void InsertAdmin(string name, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICardgame/InsertAdmin", ReplyAction="http://tempuri.org/ICardgame/InsertAdminResponse")]
        System.Threading.Tasks.Task InsertAdminAsync(string name, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICardgame/UpdateAdmin", ReplyAction="http://tempuri.org/ICardgame/UpdateAdminResponse")]
        void UpdateAdmin(System.Guid id, string name, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICardgame/UpdateAdmin", ReplyAction="http://tempuri.org/ICardgame/UpdateAdminResponse")]
        System.Threading.Tasks.Task UpdateAdminAsync(System.Guid id, string name, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICardgame/DeleteAdmin", ReplyAction="http://tempuri.org/ICardgame/DeleteAdminResponse")]
        void DeleteAdmin(System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICardgame/DeleteAdmin", ReplyAction="http://tempuri.org/ICardgame/DeleteAdminResponse")]
        System.Threading.Tasks.Task DeleteAdminAsync(System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICardgame/LoginAdmin", ReplyAction="http://tempuri.org/ICardgame/LoginAdminResponse")]
        bool LoginAdmin(string name, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICardgame/LoginAdmin", ReplyAction="http://tempuri.org/ICardgame/LoginAdminResponse")]
        System.Threading.Tasks.Task<bool> LoginAdminAsync(string name, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICardgame/LoadPlayers", ReplyAction="http://tempuri.org/ICardgame/LoadPlayersResponse")]
        System.Collections.Generic.List<RF.Cardgame.CCL.CardgameRefCC.CPlayer> LoadPlayers();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICardgame/LoadPlayers", ReplyAction="http://tempuri.org/ICardgame/LoadPlayersResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<RF.Cardgame.CCL.CardgameRefCC.CPlayer>> LoadPlayersAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICardgame/LoadPlayerById", ReplyAction="http://tempuri.org/ICardgame/LoadPlayerByIdResponse")]
        RF.Cardgame.CCL.CardgameRefCC.CPlayer LoadPlayerById(System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICardgame/LoadPlayerById", ReplyAction="http://tempuri.org/ICardgame/LoadPlayerByIdResponse")]
        System.Threading.Tasks.Task<RF.Cardgame.CCL.CardgameRefCC.CPlayer> LoadPlayerByIdAsync(System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICardgame/InsertPlayer", ReplyAction="http://tempuri.org/ICardgame/InsertPlayerResponse")]
        void InsertPlayer(string name, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICardgame/InsertPlayer", ReplyAction="http://tempuri.org/ICardgame/InsertPlayerResponse")]
        System.Threading.Tasks.Task InsertPlayerAsync(string name, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICardgame/UpdatePlayer", ReplyAction="http://tempuri.org/ICardgame/UpdatePlayerResponse")]
        void UpdatePlayer(System.Guid id, string name, string password, int wins, int losses);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICardgame/UpdatePlayer", ReplyAction="http://tempuri.org/ICardgame/UpdatePlayerResponse")]
        System.Threading.Tasks.Task UpdatePlayerAsync(System.Guid id, string name, string password, int wins, int losses);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICardgame/DeletePlayer", ReplyAction="http://tempuri.org/ICardgame/DeletePlayerResponse")]
        void DeletePlayer(System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICardgame/DeletePlayer", ReplyAction="http://tempuri.org/ICardgame/DeletePlayerResponse")]
        System.Threading.Tasks.Task DeletePlayerAsync(System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICardgame/LoginPlayer", ReplyAction="http://tempuri.org/ICardgame/LoginPlayerResponse")]
        bool LoginPlayer(string name, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICardgame/LoginPlayer", ReplyAction="http://tempuri.org/ICardgame/LoginPlayerResponse")]
        System.Threading.Tasks.Task<bool> LoginPlayerAsync(string name, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICardgame/GetPlayerByName", ReplyAction="http://tempuri.org/ICardgame/GetPlayerByNameResponse")]
        System.Guid GetPlayerByName(string playerName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICardgame/GetPlayerByName", ReplyAction="http://tempuri.org/ICardgame/GetPlayerByNameResponse")]
        System.Threading.Tasks.Task<System.Guid> GetPlayerByNameAsync(string playerName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICardgame/LoadCards", ReplyAction="http://tempuri.org/ICardgame/LoadCardsResponse")]
        System.Collections.Generic.List<RF.Cardgame.CCL.CardgameRefCC.CCard> LoadCards();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICardgame/LoadCards", ReplyAction="http://tempuri.org/ICardgame/LoadCardsResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<RF.Cardgame.CCL.CardgameRefCC.CCard>> LoadCardsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICardgame/LoadCardById", ReplyAction="http://tempuri.org/ICardgame/LoadCardByIdResponse")]
        RF.Cardgame.CCL.CardgameRefCC.CCard LoadCardById(System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICardgame/LoadCardById", ReplyAction="http://tempuri.org/ICardgame/LoadCardByIdResponse")]
        System.Threading.Tasks.Task<RF.Cardgame.CCL.CardgameRefCC.CCard> LoadCardByIdAsync(System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICardgame/InsertCard", ReplyAction="http://tempuri.org/ICardgame/InsertCardResponse")]
        void InsertCard(string name, int attack, int health, int cost);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICardgame/InsertCard", ReplyAction="http://tempuri.org/ICardgame/InsertCardResponse")]
        System.Threading.Tasks.Task InsertCardAsync(string name, int attack, int health, int cost);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICardgame/UpdateCard", ReplyAction="http://tempuri.org/ICardgame/UpdateCardResponse")]
        void UpdateCard(System.Guid id, string name, int attack, int health, int cost);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICardgame/UpdateCard", ReplyAction="http://tempuri.org/ICardgame/UpdateCardResponse")]
        System.Threading.Tasks.Task UpdateCardAsync(System.Guid id, string name, int attack, int health, int cost);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICardgame/DeleteCard", ReplyAction="http://tempuri.org/ICardgame/DeleteCardResponse")]
        void DeleteCard(string adminName, string adminPass, System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICardgame/DeleteCard", ReplyAction="http://tempuri.org/ICardgame/DeleteCardResponse")]
        System.Threading.Tasks.Task DeleteCardAsync(string adminName, string adminPass, System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICardgame/LoadDecks", ReplyAction="http://tempuri.org/ICardgame/LoadDecksResponse")]
        System.Collections.Generic.List<RF.Cardgame.CCL.CardgameRefCC.CDeck> LoadDecks();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICardgame/LoadDecks", ReplyAction="http://tempuri.org/ICardgame/LoadDecksResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<RF.Cardgame.CCL.CardgameRefCC.CDeck>> LoadDecksAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICardgame/LoadDeckById", ReplyAction="http://tempuri.org/ICardgame/LoadDeckByIdResponse")]
        RF.Cardgame.CCL.CardgameRefCC.CDeck LoadDeckById(System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICardgame/LoadDeckById", ReplyAction="http://tempuri.org/ICardgame/LoadDeckByIdResponse")]
        System.Threading.Tasks.Task<RF.Cardgame.CCL.CardgameRefCC.CDeck> LoadDeckByIdAsync(System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICardgame/InsertDeck", ReplyAction="http://tempuri.org/ICardgame/InsertDeckResponse")]
        void InsertDeck(string name, System.Guid playerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICardgame/InsertDeck", ReplyAction="http://tempuri.org/ICardgame/InsertDeckResponse")]
        System.Threading.Tasks.Task InsertDeckAsync(string name, System.Guid playerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICardgame/UpdateDeck", ReplyAction="http://tempuri.org/ICardgame/UpdateDeckResponse")]
        void UpdateDeck(System.Guid id, string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICardgame/UpdateDeck", ReplyAction="http://tempuri.org/ICardgame/UpdateDeckResponse")]
        System.Threading.Tasks.Task UpdateDeckAsync(System.Guid id, string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICardgame/DeleteDeck", ReplyAction="http://tempuri.org/ICardgame/DeleteDeckResponse")]
        void DeleteDeck(System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICardgame/DeleteDeck", ReplyAction="http://tempuri.org/ICardgame/DeleteDeckResponse")]
        System.Threading.Tasks.Task DeleteDeckAsync(System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICardgame/AssignCards", ReplyAction="http://tempuri.org/ICardgame/AssignCardsResponse")]
        void AssignCards(System.Guid deckId, System.Collections.Generic.List<RF.Cardgame.CCL.CardgameRefCC.CCard> cardList);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICardgame/AssignCards", ReplyAction="http://tempuri.org/ICardgame/AssignCardsResponse")]
        System.Threading.Tasks.Task AssignCardsAsync(System.Guid deckId, System.Collections.Generic.List<RF.Cardgame.CCL.CardgameRefCC.CCard> cardList);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICardgame/SPGetDecksByPlayer", ReplyAction="http://tempuri.org/ICardgame/SPGetDecksByPlayerResponse")]
        System.Collections.Generic.List<RF.Cardgame.CCL.CardgameRefCC.CDeck> SPGetDecksByPlayer(System.Guid playerid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICardgame/SPGetDecksByPlayer", ReplyAction="http://tempuri.org/ICardgame/SPGetDecksByPlayerResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<RF.Cardgame.CCL.CardgameRefCC.CDeck>> SPGetDecksByPlayerAsync(System.Guid playerid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICardgame/LoadGames", ReplyAction="http://tempuri.org/ICardgame/LoadGamesResponse")]
        System.Collections.Generic.List<RF.Cardgame.CCL.CardgameRefCC.CGame> LoadGames();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICardgame/LoadGames", ReplyAction="http://tempuri.org/ICardgame/LoadGamesResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<RF.Cardgame.CCL.CardgameRefCC.CGame>> LoadGamesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICardgame/LoadGameById", ReplyAction="http://tempuri.org/ICardgame/LoadGameByIdResponse")]
        RF.Cardgame.CCL.CardgameRefCC.CGame LoadGameById(System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICardgame/LoadGameById", ReplyAction="http://tempuri.org/ICardgame/LoadGameByIdResponse")]
        System.Threading.Tasks.Task<RF.Cardgame.CCL.CardgameRefCC.CGame> LoadGameByIdAsync(System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICardgame/InsertGame", ReplyAction="http://tempuri.org/ICardgame/InsertGameResponse")]
        void InsertGame(System.Guid playerId, System.Guid opponentId, System.DateTime matchDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICardgame/InsertGame", ReplyAction="http://tempuri.org/ICardgame/InsertGameResponse")]
        System.Threading.Tasks.Task InsertGameAsync(System.Guid playerId, System.Guid opponentId, System.DateTime matchDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICardgame/UpdateGame", ReplyAction="http://tempuri.org/ICardgame/UpdateGameResponse")]
        void UpdateGame(System.Guid id, System.DateTime matchdate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICardgame/UpdateGame", ReplyAction="http://tempuri.org/ICardgame/UpdateGameResponse")]
        System.Threading.Tasks.Task UpdateGameAsync(System.Guid id, System.DateTime matchdate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICardgame/DeleteGame", ReplyAction="http://tempuri.org/ICardgame/DeleteGameResponse")]
        void DeleteGame(System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICardgame/DeleteGame", ReplyAction="http://tempuri.org/ICardgame/DeleteGameResponse")]
        System.Threading.Tasks.Task DeleteGameAsync(System.Guid id);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ICardgameChannel : RF.Cardgame.CCL.CardgameRefCC.ICardgame, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CardgameClient : System.ServiceModel.ClientBase<RF.Cardgame.CCL.CardgameRefCC.ICardgame>, RF.Cardgame.CCL.CardgameRefCC.ICardgame {
        
        public CardgameClient() {
        }
        
        public CardgameClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public CardgameClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CardgameClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CardgameClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Collections.Generic.List<RF.Cardgame.CCL.CardgameRefCC.CAdmin> LoadAdmins() {
            return base.Channel.LoadAdmins();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<RF.Cardgame.CCL.CardgameRefCC.CAdmin>> LoadAdminsAsync() {
            return base.Channel.LoadAdminsAsync();
        }
        
        public RF.Cardgame.CCL.CardgameRefCC.CAdmin LoadAdminById(System.Guid id) {
            return base.Channel.LoadAdminById(id);
        }
        
        public System.Threading.Tasks.Task<RF.Cardgame.CCL.CardgameRefCC.CAdmin> LoadAdminByIdAsync(System.Guid id) {
            return base.Channel.LoadAdminByIdAsync(id);
        }
        
        public void InsertAdmin(string name, string password) {
            base.Channel.InsertAdmin(name, password);
        }
        
        public System.Threading.Tasks.Task InsertAdminAsync(string name, string password) {
            return base.Channel.InsertAdminAsync(name, password);
        }
        
        public void UpdateAdmin(System.Guid id, string name, string password) {
            base.Channel.UpdateAdmin(id, name, password);
        }
        
        public System.Threading.Tasks.Task UpdateAdminAsync(System.Guid id, string name, string password) {
            return base.Channel.UpdateAdminAsync(id, name, password);
        }
        
        public void DeleteAdmin(System.Guid id) {
            base.Channel.DeleteAdmin(id);
        }
        
        public System.Threading.Tasks.Task DeleteAdminAsync(System.Guid id) {
            return base.Channel.DeleteAdminAsync(id);
        }
        
        public bool LoginAdmin(string name, string password) {
            return base.Channel.LoginAdmin(name, password);
        }
        
        public System.Threading.Tasks.Task<bool> LoginAdminAsync(string name, string password) {
            return base.Channel.LoginAdminAsync(name, password);
        }
        
        public System.Collections.Generic.List<RF.Cardgame.CCL.CardgameRefCC.CPlayer> LoadPlayers() {
            return base.Channel.LoadPlayers();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<RF.Cardgame.CCL.CardgameRefCC.CPlayer>> LoadPlayersAsync() {
            return base.Channel.LoadPlayersAsync();
        }
        
        public RF.Cardgame.CCL.CardgameRefCC.CPlayer LoadPlayerById(System.Guid id) {
            return base.Channel.LoadPlayerById(id);
        }
        
        public System.Threading.Tasks.Task<RF.Cardgame.CCL.CardgameRefCC.CPlayer> LoadPlayerByIdAsync(System.Guid id) {
            return base.Channel.LoadPlayerByIdAsync(id);
        }
        
        public void InsertPlayer(string name, string password) {
            base.Channel.InsertPlayer(name, password);
        }
        
        public System.Threading.Tasks.Task InsertPlayerAsync(string name, string password) {
            return base.Channel.InsertPlayerAsync(name, password);
        }
        
        public void UpdatePlayer(System.Guid id, string name, string password, int wins, int losses) {
            base.Channel.UpdatePlayer(id, name, password, wins, losses);
        }
        
        public System.Threading.Tasks.Task UpdatePlayerAsync(System.Guid id, string name, string password, int wins, int losses) {
            return base.Channel.UpdatePlayerAsync(id, name, password, wins, losses);
        }
        
        public void DeletePlayer(System.Guid id) {
            base.Channel.DeletePlayer(id);
        }
        
        public System.Threading.Tasks.Task DeletePlayerAsync(System.Guid id) {
            return base.Channel.DeletePlayerAsync(id);
        }
        
        public bool LoginPlayer(string name, string password) {
            return base.Channel.LoginPlayer(name, password);
        }
        
        public System.Threading.Tasks.Task<bool> LoginPlayerAsync(string name, string password) {
            return base.Channel.LoginPlayerAsync(name, password);
        }
        
        public System.Guid GetPlayerByName(string playerName) {
            return base.Channel.GetPlayerByName(playerName);
        }
        
        public System.Threading.Tasks.Task<System.Guid> GetPlayerByNameAsync(string playerName) {
            return base.Channel.GetPlayerByNameAsync(playerName);
        }
        
        public System.Collections.Generic.List<RF.Cardgame.CCL.CardgameRefCC.CCard> LoadCards() {
            return base.Channel.LoadCards();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<RF.Cardgame.CCL.CardgameRefCC.CCard>> LoadCardsAsync() {
            return base.Channel.LoadCardsAsync();
        }
        
        public RF.Cardgame.CCL.CardgameRefCC.CCard LoadCardById(System.Guid id) {
            return base.Channel.LoadCardById(id);
        }
        
        public System.Threading.Tasks.Task<RF.Cardgame.CCL.CardgameRefCC.CCard> LoadCardByIdAsync(System.Guid id) {
            return base.Channel.LoadCardByIdAsync(id);
        }
        
        public void InsertCard(string name, int attack, int health, int cost) {
            base.Channel.InsertCard(name, attack, health, cost);
        }
        
        public System.Threading.Tasks.Task InsertCardAsync(string name, int attack, int health, int cost) {
            return base.Channel.InsertCardAsync(name, attack, health, cost);
        }
        
        public void UpdateCard(System.Guid id, string name, int attack, int health, int cost) {
            base.Channel.UpdateCard(id, name, attack, health, cost);
        }
        
        public System.Threading.Tasks.Task UpdateCardAsync(System.Guid id, string name, int attack, int health, int cost) {
            return base.Channel.UpdateCardAsync(id, name, attack, health, cost);
        }
        
        public void DeleteCard(string adminName, string adminPass, System.Guid id) {
            base.Channel.DeleteCard(adminName, adminPass, id);
        }
        
        public System.Threading.Tasks.Task DeleteCardAsync(string adminName, string adminPass, System.Guid id) {
            return base.Channel.DeleteCardAsync(adminName, adminPass, id);
        }
        
        public System.Collections.Generic.List<RF.Cardgame.CCL.CardgameRefCC.CDeck> LoadDecks() {
            return base.Channel.LoadDecks();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<RF.Cardgame.CCL.CardgameRefCC.CDeck>> LoadDecksAsync() {
            return base.Channel.LoadDecksAsync();
        }
        
        public RF.Cardgame.CCL.CardgameRefCC.CDeck LoadDeckById(System.Guid id) {
            return base.Channel.LoadDeckById(id);
        }
        
        public System.Threading.Tasks.Task<RF.Cardgame.CCL.CardgameRefCC.CDeck> LoadDeckByIdAsync(System.Guid id) {
            return base.Channel.LoadDeckByIdAsync(id);
        }
        
        public void InsertDeck(string name, System.Guid playerId) {
            base.Channel.InsertDeck(name, playerId);
        }
        
        public System.Threading.Tasks.Task InsertDeckAsync(string name, System.Guid playerId) {
            return base.Channel.InsertDeckAsync(name, playerId);
        }
        
        public void UpdateDeck(System.Guid id, string name) {
            base.Channel.UpdateDeck(id, name);
        }
        
        public System.Threading.Tasks.Task UpdateDeckAsync(System.Guid id, string name) {
            return base.Channel.UpdateDeckAsync(id, name);
        }
        
        public void DeleteDeck(System.Guid id) {
            base.Channel.DeleteDeck(id);
        }
        
        public System.Threading.Tasks.Task DeleteDeckAsync(System.Guid id) {
            return base.Channel.DeleteDeckAsync(id);
        }
        
        public void AssignCards(System.Guid deckId, System.Collections.Generic.List<RF.Cardgame.CCL.CardgameRefCC.CCard> cardList) {
            base.Channel.AssignCards(deckId, cardList);
        }
        
        public System.Threading.Tasks.Task AssignCardsAsync(System.Guid deckId, System.Collections.Generic.List<RF.Cardgame.CCL.CardgameRefCC.CCard> cardList) {
            return base.Channel.AssignCardsAsync(deckId, cardList);
        }
        
        public System.Collections.Generic.List<RF.Cardgame.CCL.CardgameRefCC.CDeck> SPGetDecksByPlayer(System.Guid playerid) {
            return base.Channel.SPGetDecksByPlayer(playerid);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<RF.Cardgame.CCL.CardgameRefCC.CDeck>> SPGetDecksByPlayerAsync(System.Guid playerid) {
            return base.Channel.SPGetDecksByPlayerAsync(playerid);
        }
        
        public System.Collections.Generic.List<RF.Cardgame.CCL.CardgameRefCC.CGame> LoadGames() {
            return base.Channel.LoadGames();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<RF.Cardgame.CCL.CardgameRefCC.CGame>> LoadGamesAsync() {
            return base.Channel.LoadGamesAsync();
        }
        
        public RF.Cardgame.CCL.CardgameRefCC.CGame LoadGameById(System.Guid id) {
            return base.Channel.LoadGameById(id);
        }
        
        public System.Threading.Tasks.Task<RF.Cardgame.CCL.CardgameRefCC.CGame> LoadGameByIdAsync(System.Guid id) {
            return base.Channel.LoadGameByIdAsync(id);
        }
        
        public void InsertGame(System.Guid playerId, System.Guid opponentId, System.DateTime matchDate) {
            base.Channel.InsertGame(playerId, opponentId, matchDate);
        }
        
        public System.Threading.Tasks.Task InsertGameAsync(System.Guid playerId, System.Guid opponentId, System.DateTime matchDate) {
            return base.Channel.InsertGameAsync(playerId, opponentId, matchDate);
        }
        
        public void UpdateGame(System.Guid id, System.DateTime matchdate) {
            base.Channel.UpdateGame(id, matchdate);
        }
        
        public System.Threading.Tasks.Task UpdateGameAsync(System.Guid id, System.DateTime matchdate) {
            return base.Channel.UpdateGameAsync(id, matchdate);
        }
        
        public void DeleteGame(System.Guid id) {
            base.Channel.DeleteGame(id);
        }
        
        public System.Threading.Tasks.Task DeleteGameAsync(System.Guid id) {
            return base.Channel.DeleteGameAsync(id);
        }
    }
}
